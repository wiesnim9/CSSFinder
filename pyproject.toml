[tool.poetry] # ANCHOR: tool.poetry
name = "cssfinder"
version = "0.6.0"
description = "Tool for Hilbert-Schmidt distance calculation with Gilbert algorithm."
authors = [
    "Krzysztof Wiśniewski <argmaster.world@gmail.com>",
    "Marcin Wieśniak <marcin.wiesniak@ug.edu.pl>",
]
repository = "https://github.com/argmaster/CSSFinder"
readme = "README.md"

[tool.poetry.dependencies] # ANCHOR: tool.poetry.dependencies
python = "^3.8"
click = "^8.1.3"
numpy = "^1.23.0"
numba = "^0.56.4"
pendulum = "^2.1.2"
scipy = "^1.9.3"
pydantic = { extras = ["email"], version = "^1.10.5" }
typing-extensions = "^4.5.0"
rich = "^13.3.1"
jsonref = "^1.1.0"
matplotlib = "^3.7.0"
pandas = "^1.5.3"
weasyprint = "^58.1"
psutil = "^5.9.4"
pytermgui = "^7.3.0"
jinja2 = "^3.1.2"
cssfinder-backend-numpy = { version = ">=0.3.0", optional = true }
cssfinder-backend-rust = { version = ">=0.1.0", optional = true }
filelock = "^3.12.0"

[tool.poetry.group.dev.dependencies] # ANCHOR: tool.poetry.dev-dependencies
black = ">=22.12,<24.0"
isort = "^5.11.4"
docformatter = { extras = ["tomli"], version = "==1.5.1" }
pytest = "^7.2.0"
autoflake = "^2.0.0"
pre-commit = ">=2.20,<4.0"
pytest-cov = "^4.0.0"
mypy = "^1.0.1"
ptpython = "^3.0.22"
typing-extensions = "^4.4.0"
snakeviz = "^2.1.1"
poethepoet = ">=0.18.1,<0.20.0"
poetry = "^1.3.2"
jinja2 = "^3.1.2"
ruff = ">=0.0.254"
ipykernel = "^6.21.3"
cssfinder-backend-numpy = ">=0.3.0"

[tool.poetry.extras]
backend-numpy = ["cssfinder-backend-numpy"]
backend-rust = ["cssfinder-backend-rust"]

[tool.poetry.scripts]
cssfinder = "cssfinder.cli:main"
cssf = "cssfinder.cli:main"

[tool.poe.tasks]
release = { script = "scripts.release:main" }
install-hooks = [
    { cmd = "poetry install --sync --no-ansi" },
    { cmd = "poetry run pre-commit install --install-hooks --overwrite" },
]
run-hooks = [
    { cmd = "poetry install --sync --no-ansi" },
    { cmd = "pre-commit run --all-files -v" },
]
build = [
    { cmd = "poetry build --format=wheel --no-ansi" },
    { cmd = "poetry build --format=sdist --no-ansi" },
]
gen-numpy-impl = { script = "scripts.gen_numpy_impl:main" }
test-system = { cmd = "pytest test/test_system -v --cov" }
test-reports = { cmd = "pytest test/test_reports -v --cov" }
type-check = [
    { cmd = "poetry install --sync --no-ansi" },
    { cmd = "mypy cssfinder test scripts" },
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options] # ANCHOR: tool.pytest
minversion = "7.2.0"
norecursedirs = [
    "external",
    "data",
    ".venv",
    ".env",
    "env",
    "venv",
    "cssfinder/examples",
]
python_files = ["test_*.py", "*_test.py"]
testpaths = ["cssfinder", "test"]
addopts = """ -ra --strict-markers --doctest-modules --log-level=DEBUG --cov-report=term-missing:skip-covered"""
filterwarnings = []

[tool.isort] # ANCHOR: tool.isort
# ---------------------------------------------------------------------------- #
#         https://pycqa.github.io/isort/docs/configuration/options.html        #
# ---------------------------------------------------------------------------- #
profile = "black"
known_first_party = "cssfinder"
# src_paths = ["cssfinder", "tests"]
line_length = 88

[tool.black] # ANCHOR: tool.black
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
extend-exclude = "(external)"

[tool.mypy] # ANCHOR: tool.mypy
# ---------------------------------------------------------------------------- #
#            https://mypy.readthedocs.io/en/stable/config_file.html            #
#            https://mypy.readthedocs.io/en/stable/command_line.html           #
#          https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html          #
# ---------------------------------------------------------------------------- #
python_version = "3.8"
# A regular expression that matches file names, directory names and paths which
# mypy should ignore while recursively discovering files to check. Use forward
#slashes (/) as directory separators on all platforms.
exclude = ["external/", ".tox/", ".venv/", ".vscode/"]
# ---------------------------------------------------------------------------- #
#                               Import discovery                               #
# ---------------------------------------------------------------------------- #
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Directs what to do with imports when the imported module is found as a .py file
# and not part of the files, modules and packages provided on the command line.
# The four possible values are normal, silent, skip and error. For explanations
# see the discussion for the --follow-imports command line flag.
follow_imports = "normal"
# Enables reporting error messages generated within installed packages (see
# :pep:`561` for more details on distributing type information). Those error
# messages are suppressed by default, since you are usually not able to
# control errors in 3rd party code.
no_silence_site_packages = false
# ---------------------------------------------------------------------------- #
#                            Disallow dynamic typing                           #
# ---------------------------------------------------------------------------- #
# Disallows usage of types that come from unfollowed imports (anything imported from
# an unfollowed import is automatically given a type of ``Any``).
disallow_any_unimported = false
# Disallows all expressions in the module that have type ``Any``.
disallow_any_expr = false
# Disallows functions that have ``Any`` in their signature after decorator transformation.
disallow_any_decorated = false
# Disallows explicit ``Any`` in type positions such as type annotations and generic
# type parameters.
disallow_any_explicit = false
# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = false
# Disallows subclassing a value of type ``Any``.
disallow_subclassing_any = false
# ---------------------------------------------------------------------------- #
#                         Untyped definitions and calls                        #
# ---------------------------------------------------------------------------- #
# Disallows calling functions without type annotations from functions with type
# annotations.
disallow_untyped_calls = false
# Disallows defining functions without type annotations or with incomplete type
# annotations.
disallow_untyped_defs = true
# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = true
# Type-checks the interior of functions without type annotations.
check_untyped_defs = true
# Reports an error whenever a function with type annotations is decorated with a
# decorator without annotations.
disallow_untyped_decorators = false
# ---------------------------------------------------------------------------- #
#                          None and Optional handling                          #
# ---------------------------------------------------------------------------- #
# Changes the treatment of arguments with a default value of ``None`` by not implicitly
# making their type :py:data:`~typing.Optional`.
no_implicit_optional = true
# Enables or disables strict Optional checks. If False, mypy treats ``None``
# as compatible with every type.
strict_optional = true
# ---------------------------------------------------------------------------- #
#                                   Warnings                                   #
# ---------------------------------------------------------------------------- #
# warns about casting an expression to its inferred type.
warn_redundant_casts = true
# Warns about unneeded ``# type: ignore`` comments.
warn_unused_ignores = false
# Shows errors for missing return statements on some execution paths.
no_warn_no_return = false
# Shows a warning when returning a value with type ``Any`` from a function
# declared with a non- ``Any`` return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or
# redundant after performing type analysis.
warn_unreachable = true
# ---------------------------------------------------------------------------- #
#                        Miscellaneous strictness flags                        #
# ---------------------------------------------------------------------------- #
# Causes mypy to suppress errors caused by not being able to fully
# infer the types of global and class variables.
allow_untyped_globals = false
# Allows variables to be redefined with an arbitrary type, as long as the redefinition
# is in the same block and nesting level as the original definition.
# Example where this can be useful:
allow_redefinition = true
# Disallows inferring variable type for ``None`` from two assignments in different scopes.
# This is always implicitly enabled when using the :ref:`mypy daemon <mypy_daemon>`.
local_partial_types = false
# By default, imported values to a module are treated as exported and mypy allows
# other modules to import them. When false, mypy will not re-export unless
# the item is imported using from-as or is included in ``__all__``. Note that mypy
# treats stub files as if this is always disabled. For example:
no_implicit_reexport = false
# Prohibit equality checks, identity checks, and container checks between
# non-overlapping types.
strict_equality = true
# ---------------------------------------------------------------------------- #
#      https://mypy.readthedocs.io/en/stable/error_codes.html#error-codes      #
# ---------------------------------------------------------------------------- #
# Allows disabling one or multiple error codes globally.
# disable_error_code =
# Allows enabling one or multiple error codes globally.
enable_error_code = "redundant-expr"
# ---------------------------------------------------------------------------- #
#                          Configuring error messages                          #
# ---------------------------------------------------------------------------- #
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# hows error codes in error messages. See :ref:`error-codes` for more information.
show_error_codes = true
# Use visually nicer output in error messages: use soft word wrap,
# show source code snippets, and show error location markers.
pretty = true
# Shows error messages with color enabled.
color_output = true
# Shows a short summary line after error messages.
error_summary = true
# Show absolute paths to files.
show_absolute_path = true

[tool.ruff]
extend-select = [
    "A001",
    "A002",
    "A003",
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "ARG005",
    "B002",
    "B003",
    "B004",
    "B005",
    "B006",
    "B007",
    "B008",
    "B009",
    "B010",
    "B011",
    "B012",
    "B013",
    "B014",
    "B015",
    "B016",
    "B017",
    "B018",
    "B019",
    "B020",
    "B021",
    "B022",
    "B023",
    "B024",
    "B025",
    "B026",
    "B027",
    "B029",
    "B032",
    "B904",
    "B905",
    "BLE001",
    "C400",
    "C401",
    "C402",
    "C403",
    "C404",
    "C405",
    "C406",
    "C408",
    "C409",
    "C410",
    "C411",
    "C413",
    "C414",
    "C415",
    "C416",
    "C417",
    "C901",
    "COM818",
    "COM819",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    # "D107",
    "D200",
    "D201",
    "D202",
    # "D203",
    "D204",
    # "D205",
    "D206",
    "D207",
    "D208",
    "D209",
    "D210",
    "D211",
    "D212",
    # "D213",
    "D214",
    "D215",
    "D300",
    "D301",
    "D400",
    "D401",
    "D402",
    "D403",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D412",
    "D413",
    "D414",
    "D415",
    "D416",
    "D417",
    "D418",
    "D419",
    "DJ001",
    "DJ008",
    "DJ013",
    "DTZ001",
    "DTZ002",
    "DTZ003",
    "DTZ004",
    "DTZ005",
    "DTZ006",
    "DTZ007",
    "DTZ011",
    "DTZ012",
    "E101",
    "E401",
    "E402",
    "E501",
    "E701",
    "E702",
    "E703",
    "E711",
    "E712",
    "E713",
    "E714",
    "E721",
    "E722",
    "E731",
    "E741",
    "E742",
    "E743",
    "E902",
    "E999",
    "EM101",
    "EM102",
    "EM103",
    "ERA001",
    "EXE001",
    "EXE002",
    "EXE003",
    "EXE004",
    "EXE005",
    "F401",
    "F402",
    "F403",
    "F404",
    "F405",
    "F406",
    "F407",
    "F501",
    "F502",
    "F503",
    "F504",
    "F505",
    "F506",
    "F507",
    "F508",
    "F509",
    "F521",
    "F522",
    "F523",
    "F524",
    "F525",
    "F541",
    "F601",
    "F602",
    "F621",
    "F622",
    "F631",
    "F632",
    "F633",
    "F634",
    "F701",
    "F702",
    "F704",
    "F706",
    "F707",
    "F722",
    "F811",
    "F821",
    "F822",
    "F823",
    "F841",
    "F842",
    "F901",
    "FBT001",
    "FBT002",
    "FBT003",
    "G001",
    "G002",
    "G003",
    "G004",
    "G010",
    "G101",
    "G201",
    "G202",
    "I001",
    "I002",
    "ICN001",
    "INP001",
    "ISC001",
    "ISC002",
    "ISC003",
    "N801",
    "N802",
    "N803",
    "N804",
    "N805",
    "N806",
    "N807",
    "N811",
    "N812",
    "N813",
    "N814",
    "N815",
    "N816",
    "N817",
    "N818",
    "N999",
    "NPY001",
    "NPY002",
    "PD002",
    "PD003",
    "PD004",
    "PD007",
    "PD008",
    "PD009",
    "PD010",
    "PD011",
    "PD012",
    "PD013",
    "PD015",
    "PD901",
    "PGH001",
    "PGH002",
    "PGH003",
    "PGH004",
    "PIE790",
    "PIE794",
    "PIE796",
    "PIE800",
    "PIE804",
    "PIE807",
    "PIE810",
    "PLC041",
    "PLC0414",
    "PLC300",
    "PLC3002",
    "PLE010",
    "PLE0100",
    "PLE0101",
    "PLE011",
    "PLE0117",
    "PLE0118",
    "PLE060",
    "PLE0604",
    "PLE0605",
    "PLE114",
    "PLE1142",
    "PLE120",
    "PLE1205",
    "PLE1206",
    "PLE130",
    "PLE1307",
    "PLE131",
    "PLE1310",
    "PLE250",
    "PLE2502",
    "PLR013",
    "PLR0133",
    "PLR020",
    "PLR0206",
    "PLR040",
    "PLR0402",
    "PLR091",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR170",
    "PLR1701",
    "PLR172",
    "PLR1722",
    "PLR200",
    "PLR2004",
    "PLW012",
    "PLW0120",
    "PLW060",
    "PLW0602",
    "PLW290",
    "PLW2901",
    "PT001",
    "PT002",
    "PT003",
    "PT004",
    "PT005",
    "PT006",
    "PT007",
    "PT008",
    "PT009",
    "PT010",
    "PT011",
    "PT012",
    "PT013",
    "PT015",
    "PT016",
    "PT017",
    "PT018",
    "PT019",
    "PT020",
    "PT021",
    "PT022",
    "PT023",
    "PT024",
    "PT025",
    "PT026",
    "PTH100",
    "PTH101",
    "PTH102",
    "PTH103",
    "PTH104",
    "PTH105",
    "PTH106",
    "PTH107",
    "PTH108",
    "PTH109",
    "PTH110",
    "PTH111",
    "PTH112",
    "PTH113",
    "PTH114",
    "PTH115",
    "PTH116",
    "PTH117",
    "PTH118",
    "PTH119",
    "PTH120",
    "PTH121",
    "PTH122",
    "PTH123",
    "PTH124",
    "PYI001",
    "PYI007",
    "PYI008",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "RET501",
    "RET502",
    "RET503",
    # "RET504",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RSE102",
    "RUF001",
    "RUF002",
    "RUF003",
    # "RUF004",
    "RUF005",
    "RUF006",
    "RUF100",
    "S102",
    "S103",
    "S104",
    "S105",
    "S106",
    "S107",
    "S108",
    "S110",
    "S112",
    "S113",
    "S324",
    "S501",
    "S506",
    "S508",
    "S509",
    "S608",
    "S612",
    "S701",
    "SIM101",
    "SIM102",
    "SIM103",
    "SIM105",
    "SIM107",
    "SIM108",
    "SIM109",
    "SIM110",
    "SIM112",
    "SIM114",
    "SIM115",
    "SIM116",
    "SIM117",
    "SIM118",
    "SIM201",
    "SIM202",
    "SIM208",
    "SIM210",
    "SIM211",
    "SIM212",
    "SIM220",
    "SIM221",
    "SIM222",
    "SIM223",
    "SIM300",
    "SIM401",
    "SLF001",
    "T100",
    "T203",
    "TCH001",
    "TCH002",
    "TCH003",
    "TCH004",
    "TCH005",
    "TID251",
    "TID252",
    "TRY002",
    "TRY003",
    "TRY004",
    "TRY200",
    "TRY201",
    "TRY300",
    "TRY301",
    "TRY400",
    "TRY401",
    "UP001",
    "UP003",
    "UP004",
    "UP005",
    # "UP006",
    # "UP007",  # breaks compatibility with Python <3.10
    "UP008",
    "UP009",
    "UP010",
    "UP011",
    "UP012",
    "UP013",
    "UP014",
    "UP015",
    "UP017",
    "UP018",
    "UP019",
    "UP020",
    "UP021",
    "UP022",
    "UP023",
    "UP024",
    "UP025",
    "UP026",
    "UP027",
    "UP028",
    "UP029",
    "UP030",
    "UP031",
    "UP032",
    "UP033",
    "UP034",
    "UP035",
    "UP036",
    "UP037",
    "W292",
    "W505",
    "W605",
    "YTT101",
    "YTT102",
    "YTT103",
    "YTT201",
    "YTT202",
    "YTT203",
    "YTT204",
    "YTT301",
    "YTT302",
    "YTT303",
]
show-fixes = true
target-version = "py38"
